theRegion[unique(queryHits(oo3UTR))] = "3UTR"
theTx[unique(queryHits(oo3UTR))] = utr3red$TxID[subjectHits(oo3UTR)]
theTxName[unique(queryHits(oo3UTR))] = utr3red$TxName[subjectHits(oo3UTR)]
theGene[unique(queryHits(oo3UTR))] = utr3red$Gene[subjectHits(oo3UTR)]
theSymbol[unique(queryHits(oo3UTR))] = utr3red$Symbol[subjectHits(oo3UTR)]
## clean up vectors
theTx = IntegerList(lapply(theTx, unique))
theTxName = CharacterList(lapply(theTxName, unique))
theSymbol = CharacterList(lapply(theSymbol, unique))
theGene = CharacterList(lapply(theGene, unique))
values(dGR) = DataFrame(theRegion, theTx,theTxName,theGene,theSymbol)
names(values(dGR)) = c("theRegion", "tx_id", "tx_name", "gene","symbol")
codingGR = dGR
########
### introns, exons, promoters
fullGR <- c(intronsRed, exonsRed)
######## disjoin
dGR <- disjoin(fullGR)
theTx = IntegerList(vector("list", length(dGR)))
theTxName = theSymbol=theGene =CharacterList(vector("list", length(dGR)))
theRegion = rep(NA, length(dGR))
## introns
ooIntrons = findOverlaps(dGR, intronsRed, type="within")
theRegion[unique(queryHits(ooIntrons))] = "intron"
theTx[unique(queryHits(ooIntrons))] = intronsRed$TxID[subjectHits(ooIntrons)]
theTxName[unique(queryHits(ooIntrons))] = intronsRed$TxName[subjectHits(ooIntrons)]
theGene[unique(queryHits(ooIntrons))] = intronsRed$Gene[subjectHits(ooIntrons)]
theSymbol[unique(queryHits(ooIntrons))] = intronsRed$Symbol[subjectHits(ooIntrons)]
## Exons
ooExons = findOverlaps(dGR, exonsRed, type="within")
theRegion[unique(queryHits(ooExons))] = "exon"
theTx[unique(queryHits(ooExons))] = exonsRed$TxID[subjectHits(ooExons)]
theTxName[unique(queryHits(ooExons))] = exonsRed$TxName[subjectHits(ooExons)]
theGene[unique(queryHits(ooExons))] = exonsRed$Gene[subjectHits(ooExons)]
theSymbol[unique(queryHits(ooExons))] = exonsRed$Symbol[subjectHits(ooExons)]
## clean up vectors
theTx = IntegerList(lapply(theTx, unique))
theTxName = CharacterList(lapply(theTxName, unique))
theSymbol = CharacterList(lapply(theSymbol, unique))
theGene = CharacterList(lapply(theGene, unique))
values(dGR) = DataFrame(theRegion, theTx,theTxName,theGene,theSymbol)
names(values(dGR)) = c("theRegion", "tx_id", "tx_name", "gene","symbol")
fullGR = dGR
######## reduce segments of the same type
if(verbose) cat("Reducing Again.\n")
rIndexes <- split(seq_len(length(fullGR)), fullGR$theRegion)
grList <- lapply(rIndexes, function(i) {
r <- fullGR[i]
rr <- reduce(r, with.mapping=TRUE)
mapping <- sapply(mcols(rr)$mapping, "[", 1)
values(rr) <- mcols(r)[mapping,]
return(rr)
})
fullGR <- unlist(GRangesList(grList))
fullGR <- sort(fullGR)
rIndexes2 <- split(seq_len(length(codingGR)), codingGR$theRegion)
grList2 <- lapply(rIndexes2, function(i) {
r <- codingGR[i]
rr <- reduce(r, with.mapping=TRUE)
mapping <- sapply(mcols(rr)$mapping, "[", 1)
values(rr) <- mcols(r)[mapping,]
return(rr)
})
codingGR <- unlist(GRangesList(grList2))
codingGR <- sort(codingGR)
#### gaps to get intragenic candidate regions
if(verbose) cat("Adding Intragenic Regions.\n")
## full
mcols(fullGR)$Gene_Strand <- strand(fullGR)
strand(fullGR) <- Rle("*")
fullIntraGR <- gaps(fullGR)
strand(fullGR) <- as.character(mcols(fullGR)$Gene_Strand)
mcols(fullGR)$Gene_Strand <- NULL
fList <- split(fullIntraGR, seqnames(fullIntraGR))
for(i in seq(along = fList)) {
x <- fList[[i]]
fList[[i]] <- x[width(x) != seqlengths(fullIntraGR)[i]]
}
fullIntraGR <- unlist(fList)
addTxName= addSym=addGene=CharacterList(vector("list", length(fullIntraGR)))
addTx=IntegerList(vector("list", length(fullIntraGR)))
gRegion = rep("intragenic", length(fullIntraGR))
values(fullIntraGR) =DataFrame(gRegion,	addTx,addTxName, addGene,addSym)
names(mcols(fullIntraGR)) = names(mcols(fullGR))
fullGenome <- c(fullIntraGR,fullGR)
fullGenome<- sort(fullGenome)
names(fullGenome) <- seq(along = fullGenome)
## coding
mcols(codingGR)$Gene_Strand <- strand(codingGR)
strand(codingGR) <- Rle("*")
codingIntraGR <- gaps(codingGR)
strand(codingGR) <- as.character(mcols(codingGR)$Gene_Strand)
mcols(codingGR)$Gene_Strand <- NULL
fList <- split(codingIntraGR, seqnames(codingIntraGR))
for(i in seq(along = fList)) {
x <- fList[[i]]
fList[[i]] <- x[width(x) != seqlengths(codingIntraGR)[i]]
}
codingIntraGR <- unlist(fList)
addTxName=addSym= addGene=CharacterList(vector("list", length(codingIntraGR)))
addTx=IntegerList(vector("list", length(codingIntraGR)))
gRegion = rep("intragenic", length(codingIntraGR))
values(codingIntraGR) =DataFrame(gRegion,	addTx,addTxName, addGene,addSym)
names(mcols(codingIntraGR)) = names(mcols(codingGR))
codingGenome <- c(codingIntraGR, codingGR)
codingGenome <- sort(codingGenome)
names(codingGenome) <- seq(along = codingGenome)
if(addChrPrefix) {
seqlevels(codingGenome) <- paste0("chr", seqlevels(codingGenome))
seqlevels(fullGenome) <- paste0("chr", seqlevels(fullGenome))
}
GenomicState <- GRangesList(fullGenome = fullGenome, codingGenome = codingGenome)
## Done
return(GenomicState)
}
gs = makeGenomicState(txdb, chr=c(1:22,"X","Y"),addChrPrefix=TRUE)
head(gs$fullGenome)
gs2 = makeGenomicState(txdb2)
head(gs2$fullGenome)
head(scatter.smooth)
library(gee)
install.packages("gee")
library(gee)
?predict.gee
?predict
?gee
RIN Exploration
data(warpbreaks)
f = gee(breaks ~ tension, id=wool, data=warpbreaks, corstr="exchangeable")
f
coef(f)
mod = model.matrxi(~warpbreaks$tension)
mod = model.matrix(~warpbreaks$tension)
head(mod
)
solve(t(mod) %*% mod) %*% coef(f)
solve(t(mod) %*% mod) %*% coef(f)
mod
mod %*% coef(f)
fitted(f)
identical(as.numeric(mod %*% coef(f)), fitted(f))
f = gee(breaks ~ tension, id=wool, data=warpbreaks, corstr="exchangeable")
library(gee)
BipolarCauc_021414 <- read.csv("C:/Users/Andrew/Downloads/BipolarCauc_021414.csv")
View(BipolarCauc_021414)
x = BipolarCauc_021414
head(x)
dim(x)
table(x$Race)
table(x$Sex)
table(x$Dx)
f1 = function(x) 23503+880*(x+24)
f1 = function(x) 23503+880*(x+24)
f2 = function(x) 1089*x
32*12
x = 0:384
x = 0:384
m1 = f1(x)
m2 = f2(x)
plot(m1, m2)
plot(m1, type="l")
axis(1, at=seq(0,384,12))
plot(m1, type="l", ylab="$",xaxt="n")
axis(1, at=seq(0,384,12))
plot(m1, type="l", ylab="$",xaxt="n")
axis(1, at=seq(0,384,12), 1:32)
axis(1, at=seq(1,384,12), 1:32)
plot(m1, type="l", ylab="$",xaxt="n")
axis(1, at=seq(0,384,12), 0:32)
plot(m1, type="l", ylab="$",xaxt="n",xlab="Years")
axis(1, at=seq(0,384,12), 0:32)
lines(m2)
axis(1, at=seq(0,384,12), 66:100)
plot(m1, type="l", ylab="$",xaxt="n",xlab="Years")
axis(1, at=seq(0,384,12), 68:100)
plot(m2, type="l", ylab="$",xaxt="n",xlab="Years")
axis(1, at=seq(0,384,12), 68:100)
lines(m1)
plot(m2, type="l", ylab="$",xaxt="n",xlab="Years",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
lines(m1,col="blue",lwd=2)
plot(m1-m2)
plot(m1-m2, type="l", ylab="Now Versus Later",xaxt = "n",xlab="Years")
axis(1, at=seq(0,384,12), 68:100)
abline(h=0,lty=2)
pdf("retirement",h=6,w=12)
plot(m2, type="l", ylab="$",xaxt="n",xlab="Age",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
lines(m1,col="blue",lwd=2)
plot(m1-m2, type="l", ylab="Now Versus Later",xaxt = "n",xlab="Age")
axis(1, at=seq(0,384,12), 68:100)
abline(h=0,lty=2)
dev.off()
getwd()
",h=6,w=12)
plot(m2, type="l", ylab="$",xaxt="n",xlab="Age",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
pdf("retirement.pdf",h=6,w=12)
plot(m2, type="l", ylab="$",xaxt="n",xlab="Age",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
lines(m1,col="blue",lwd=2)
plot(m1-m2, type="l", ylab="Now Versus Later",xaxt = "n",xlab="Age")
axis(1, at=seq(0,384,12), 68:100)
abline(h=0,lty=2)
dev.off()
pdf("retirement.pdf",h=6,w=12)
par(mfrow=c(1,2))
plot(m2, type="l", ylab="$",xaxt="n",xlab="Age",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
lines(m1,col="blue",lwd=2)
plot(m1-m2, type="l", ylab="Now Versus Later",xaxt = "n",xlab="Age")
axis(1, at=seq(0,384,12), 68:100)
abline(h=0,lty=2)
dev.off()
pdf("retirement.pdf",h=6,w=12)
par(mfrow=c(1,2))
plot(m2, type="l", ylab="$",xaxt="n",xlab="Age",lwd=2,col="red")
axis(1, at=seq(0,384,12), 68:100)
lines(m1,col="blue",lwd=2)
legend("topleft", c("Now","Later"),col=c("blue","red"),pch=15)
plot(m1-m2, type="l", ylab="Now Versus Later",xaxt = "n",xlab="Age")
axis(1, at=seq(0,384,12), 68:100)
abline(h=0,lty=2)
dev.off()
library(CO2)
data(CO2)
head(CO2)
summary(lm(conc ~ uptake, data=CO2))
summary(lm(conc ~ uptake, data=CO2))
summary(lm(conc ~ uptake+Treatment, data=CO2))
anova(f1,f2)
data(CO2) # built into R
f1 = lm(conc ~ uptake, data=CO2)
summary(f1)
f2 = lm(conc ~ uptake+Treatment, data=CO2)
summary(f2)
anova(f1,f2)
head(CO2)
table(CO2$Plant)
f3 = f2 = lm(conc ~ uptake+Plant, data=CO2) # more levels, categorical
f2 = lm(conc ~ uptake+Treatment, data=CO2) # multivariate
f3 = lm(conc ~ uptake+Plant, data=CO2) # more levels, categorical
summary(f3)
anova(f1,f3) # explicit anova
aov(conc ~ uptake+Plant, data=CO2))
aov(conc ~ uptake+Plant, data=CO2)
summary(aov(conc ~ uptake+Plant, data=CO2))
summary(f3)
anova(f1,f3) # explicit anova
summary(aov(conc ~ Plant+uptake, data=CO2))
data(CO2) # built into R
f1 = lm(conc ~ uptake, data=CO2) # regression model
summary(f1) # estimate is slope, t value is standardized, with corr. p-value
f2 = lm(conc ~ uptake+Treatment, data=CO2) # multivariate
summary(f2)
anova(f1,f2) # explicit anova
f3 = lm(conc ~ uptake+Plant, data=CO2) # more levels, categorical
summary(f3)
anova(f1,f3) # explicit anova
## order matters
summary(aov(conc ~ uptake+Plant, data=CO2))
summary(aov(conc ~ Plant+uptake, data=CO2))
?curv
?curve
library(GenomicRanges)
gr1 = GRanges("chr1", IRanges(start=c(1234,2345),
end = c(1256, 2378)))
gr1 = GRanges("chr1", IRanges(start=c(1234,2345),
end = c(1256, 2378)))
gr2 = GRanges("chr11", IRanges(start=c(11234,12345),
end = c(11256, 12378)))
grl = GRangesList(gr1,gr2)
range(grl)
unlist(range(grl))
?prop.test
library(quantmod)
prin = read.delim("principal_tickers.txt",as.is=TRUE)
colnames(prin)[14] = "ER"
ef = read.delim("vanguard_funds.txt",as.is=TRUE)
ef$ER = as.numeric(gsub("\\%","",ef$ER))
prin$ER = as.numeric(gsub("\\%","",prin$ER))
# get data from tickers
tickers = c(prin$Ticker, ef$Ticker)
data = data.frame(Ticker = tickers, ER = c(prin$ER, ef$ER),
Fund = c(rep("Principal", nrow(prin)),
rep("Vanguard", nrow(ef))),
stringsAsFactors=FALSE)
data = data[data$Ticker !="VMMXX",]
theData = vector("list", length(data$Ticker))
names(theData) = data$Ticker
for(i in seq(along=data$Ticker)) {
cat(".")
getSymbols(data$Ticker[i], from = "1900-01-01")
theData[[i]] = get(data$Ticker[i])
}
returns = sapply(theData, allReturns)
meanReturns = sapply(returns, mean)
head(returns[[1]])
x = returns[[1]]
head(x)
sum(x$daily, na.rm=TRUE)
sum(x$yearly, na.rm=TRUE)
sum(x$weekly, na.rm=TRUE)
mean(x$weekly, na.rm=TRUE)
mean(x$yearly, na.rm=TRUE)
head(data)
head(prin)
head(theData[[1]])
?getSymbols
library(googleCite)
x = searchCite("Andrew JAffe")
1
x
head(x)
dim(x)
y = matrix(NA,nrow=1000,ncol=20)
grp = rep(c(0,1),each=10)
# batch = rnorm(20,mean=-2*grp)
batch = rnorm(20,mean=3)
beta0 = rnorm(1000)
beta1 = rnorm(1000)
beta2 = rnorm(1000,mean=5)
for(i in 1:1000){
y[i,] = beta0[i] + beta1[i]*grp + beta2[i]*batch + rnorm(20)
}
bhat1 = bhat2 = rep(NA,1000)
for(i in 1:1000){
fit1 = lm(y[i,] ~ batch)
fit2 = lm(y[i,] ~ grp + batch)
bhat1[i] = fit1$coeff[2]
bhat2[i] = fit2$coeff[2]
}
plot(bhat1,bhat2,pch=19)
abline(lm(bhat2 ~bhat1),lwd=3,col="blue")
cor(bhat1,bhat2)
library(devtools)
install_github("sva-devel", "andrewejaffe")
install_github("andrewejaffe/sva-devel")
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
install_github("andrewejaffe/sva-devel")
library(sva)
y = matrix(NA,nrow=1000,ncol=20)
grp = rep(c(0,1),each=10)
mod = model.matrix(~grp)
mod
y
y = matrix(NA,nrow=1000,ncol=20)
grp = rep(c(0,1),each=10)
# batch = rnorm(20,mean=-2*grp)
batch = rnorm(20,mean=3)
beta0 = rnorm(1000)
beta1 = rnorm(1000)
beta2 = rnorm(1000,mean=5)
for(i in 1:1000){
y[i,] = beta0[i] + beta1[i]*grp + beta2[i]*batch + rnorm(20)
}
sva(y,mod,vfilter=100)
install_github("andrewejaffe/sva-devel")
sva(y,mod,vfilter=100)
set.seed(42)
p = runif(1e5)
p = cbind(p,runif(1000, max=0.001))
sum(p.adjust(p, "fdr") < 0.05)
hist(p)
set.seed(42)
p = runif(1e5)
p = c(p,runif(1000, max=0.001))
sum(p.adjust(p, "fdr") < 0.05)
set.seed(42)
p = runif(1e5)
p = c(p,runif(1000, max=0.0001))
sum(p.adjust(p, "fdr") < 0.05)
sum(p.adjust(c(p,p), "fdr") < 0.05)
hist(p)
set.seed(42)
p = runif(1e5)
p = c(p,runif(10000, max=0.001))
hist(p)
sum(p.adjust(p, "fdr") < 0.05)
sum(p.adjust(c(p,p), "fdr") < 0.05)
set.seed(42)
p = runif(1e6)
p = c(p,runif(10000, max=0.001))
hist(p)
sum(p.adjust(p, "fdr") < 0.05)
sum(p.adjust(c(p,p), "fdr") < 0.05)
set.seed(42)
p = runif(1e6)
p = c(p,runif(10000, max=0.0005))
hist(p)
sum(p.adjust(p, "fdr") < 0.05)
sum(p.adjust(c(p,p), "fdr") < 0.05)
set.seed(42)
p = runif(1e5)
p = c(p,runif(1000, max=0.0005))
hist(p)
sum(p.adjust(p, "fdr") < 0.05)
sum(p.adjust(c(p,p), "fdr") < 0.05)
qv = p.adjust(p, "fdr")
qv = p.adjust(p, "fdr")
qvRep = p.adjust(c(p,p), "fdr")
set.seed(42)
p1 = c(runif(1e5),runif(1000, max=0.0005))
p2 = c(runif(1e5),runif(1000, max=0.0005))
set.seed(42)
p1 = c(runif(1e5),runif(1000, max=0.0005))
p2 = c(runif(1e5),runif(1000, max=0.0005))
hist(p)
qv1 = p.adjust(p1, "fdr")
qv2 = p.adjust(p2, "fdr")
qv = p.adjust(c(p1,p2), "fdr")
sum(qv1 < 0.05)
sum(qv2 < 0.05)
sum(qv < 0.05)
p1[order(p1)[1:sum(qv1<0.05)]]
p1[order(p1)[sum(qv1<0.05)]]
p2[order(p2)[sum(qv2<0.05)]]
c(p,p)[order(c(p,p))[sum(qv<0.05)]]
c(p1,p2)[order(c(p1,p2))[sum(qv<0.05)]]
set.seed(42)
p1 = c(runif(1e5),runif(1000, max=0.0005))
p2 = c(runif(1e5),runif(1000, max=0.0005))
hist(p)
qv1 = p.adjust(p1, "fdr")
qv2 = p.adjust(p2, "fdr")
qv = p.adjust(c(p1,p2), "fdr")
sum(qv1 < 0.05)
p1[order(p1)[sum(qv1<0.05)]]
sum(qv2 < 0.05)
p2[order(p2)[sum(qv2<0.05)]]
sum(qv < 0.05)
c(p1,p2)[order(c(p1,p2))[sum(qv<0.05)]]
pt(13.847,df=1426)
pt(13.847,df=1426,lower.tail=TRUE)
pt(13.847,df=1426,lower.tail=FALSE)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
require(synapseClient)
synapseLogin()
synapseLogin()
cmcData = synGet('syn2759798')
View(mod)
cmcData = synGet('syn3280440')
cmcData
annotations(cmcData)
str(cmcData)
require(synapseClient)
synapseLogin()
cmcData = synGet('syn3280440')
respDF <- read.delim(cmcData@filePath, header=TRUE, as.is=TRUE)
cmcData = synGet('syn3346749')
onWeb("syn3346749")
?onWeb
to.fix.semicolons <- read.csv("C:/Users/Andrew/Downloads/to-fix-semicolons.csv", stringsAsFactors=FALSE)
View(to.fix.semicolons)
x = to.fix.semicolons
head(x)
head(x)
x <- read.csv("C:/Users/Andrew/Downloads/to-fix-semicolons.csv", stringsAsFactors=FALSE, row.names=1
)
head(x)
dim(x)
y = strsplit(x[,i], ";")
i=1
y = strsplit(x[,i], ";")
y
y = sapply(y, function(z) z[z!=""])
y
sapply(1:ncol(x), function(i) {
y = strsplit(x[,i], ";")
y = sapply(y, function(z) z[z!=""])
sapply(y, paste,collapse=";")
})
out = sapply(1:ncol(x), function(i) {
y = strsplit(x[,i], ";")
sapply(y, paste,collapse=";")
y = sapply(y, function(z) z[z!=""])
})
dim(out)
head(out)
out = lapply(1:ncol(x), function(i) {
y = strsplit(x[,i], ";")
sapply(y, paste,collapse=";")
y = sapply(y, function(z) z[z!=""])
})
head(out[[1]])
out = lapply(1:ncol(x), function(i) {
y = strsplit(x[,i], ";")
y = lapply(y, function(z) z[z!=""])
sapply(y, paste,collapse=";")
})
out[[1]]
out = sapply(1:ncol(x), function(i) {
y = strsplit(x[,i], ";")
y = lapply(y, function(z) z[z!=""])
sapply(y, paste,collapse=";")
})
out = as.data.frame(out)
head(out)
znorm(4)
dnorm(4)
dnorm(3)
dnorm(4)
dnorm(4)*q2
dnorm(4)*2
setwd("F:/Hopkins/Lieber/Research/GitHub/winterR_2016/Manipulating_Data_in_R/lecture")
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
install.packages("lubridate")
sessionInfo()
