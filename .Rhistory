source('~/.active-rstudio-document', echo=TRUE)
check_Sal = Sal
rownames(check_Sal) = NULL
all.equal(check_Sal, dplyr_sal)
str_split()
?str_split()
?str_sub
suppressWarnings(library(car))
library(car)
library(car, quietly = TRUE)
?library()
Sal$AnnualSalary <- as.numeric(gsub(pattern = "$", replacement="",
Sal$AnnualSalary, fixed=TRUE))
Sal <- Sal[order(Sal$AnnualSalary, decreasing=TRUE), ]
Sal[1:5, c("Name", "AnnualSalary", "JobTitle")]
?join
library(dplyr)
?join
source('~/.active-rstudio-document', echo=TRUE)
?joineR::
help(package = "joineR")
inner_join(base, visits)
left_join(base, visits)
right_join(base, visits)
tail(full_join(base, visits))
source('~/.active-rstudio-document', echo=TRUE)
setwd("../../")
source('~/Dropbox/Classes/winterR_2016/render.R')
q('no')
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(0, NA, 2, 3, 4)
x > 2
## ------------------------------------------------------------------------
x != NA
x > 2 & !is.na(x)
## ------------------------------------------------------------------------
(x == 0 | x == 2) # has NA
(x == 0 | x == 2) & !is.na(x) # No NA
x %in% c(0, 2) # NEVER has NA and returns logical
## ------------------------------------------------------------------------
x + 2
x * 2
## ----table---------------------------------------------------------------
table(x)
table(x, useNA = "ifany")
## ----onetab--------------------------------------------------------------
table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
useNA = "always")
## ------------------------------------------------------------------------
tab <- table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
## ----margin--------------------------------------------------------------
margin.table(tab, 2)
## ----table2--------------------------------------------------------------
prop.table(tab)
prop.table(tab,1)
## ----readSal-------------------------------------------------------------
Sal = read.csv("http://www.aejaffe.com/winterR_2016/data/Baltimore_City_Employee_Salaries_FY2014.csv",
as.is = TRUE)
## ----isna----------------------------------------------------------------
head(Sal,2)
any(is.na(Sal$Name)) # are there any NAs?
## ---- eval = FALSE-------------------------------------------------------
data$gender[data$gender %in%
c("Male", "M", "m")] <- "Male"
## ------------------------------------------------------------------------
library(car, quietly = TRUE)
x = rep(c("Male", "M", "m", "f", "Female", "female" ),
each = 3)
car::recode(x, "c('m', 'M', 'male') = 'Male';
c('f', 'F', 'female') = 'Female';")
## ------------------------------------------------------------------------
library(plyr)
plyr::revalue(x, c("M" = "Male", "m" = "Male",
"f" = "Female", "female" = "Female"))
## ----gender, echo=FALSE--------------------------------------------------
set.seed(4) # random sample below - make sure same every time
gender <- sample(c("Male", "mAle", "MaLe", "M", "MALE", "Ma", "FeMAle", "F", "Woman", "Man", "Fm", "FEMALE"), 1000, replace = TRUE)
## ----gentab--------------------------------------------------------------
table(gender)
## ----Paste---------------------------------------------------------------
paste("Visit", 1:5, sep = "_")
paste("Visit", 1:5, sep = "_", collapse = " ")
paste("To", "is going be the ", "we go to the store!", sep = "day ")
# and paste0 can be even simpler see ?paste0
paste0("Visit",1:5)
## ----Paste2--------------------------------------------------------------
paste(1:5)
paste(1:5, collapse = " ")
## ----strsplit------------------------------------------------------------
x <- c("I really", "like writing", "R code programs")
y <- strsplit(x, split = " ") # returns a list
y
## ----str_split-----------------------------------------------------------
library(stringr)
y2 <- str_split(x, " ") # returns a list
y2
## ------------------------------------------------------------------------
str_split("I.like.strings", ".")
str_split("I.like.strings", fixed("."))
## ----stsplit2------------------------------------------------------------
suppressPackageStartupMessages(library(dplyr)) # must be loaded AFTER plyr
y[[2]]
sapply(y, dplyr::first) # on the fly
sapply(y, nth, 2) # on the fly
sapply(y, last) # on the fly
head(Sal$Name)
head(Sal)
head(str_replace(Sal$AnnualSalary, fixed("$"), ""))
head(Sal$Agency)
head(Sal$AnnualSalary)
head(str_replace(Sal$AnnualSalary, fixed("$"), ""))
head(as.numeric(str_replace(Sal$AnnualSalary, fixed("$"), "")))
dplyr_sal = Sal
dplyr_sal = dplyr_sal %>% mutate(
AnnualSalary = AnnualSalary %>%
str_replace(
fixed("$"),
"") %>%
as.numeric) %>%
arrange(desc(AnnualSalary))
head(dplyr_sal)
Sal$AnnualSalary
Sal$AnnualSalary %>% str_replace(fixed("$"), "")
head(Sal$AnnualSalary %>% str_replace(fixed("$"), ""))
head(Sal$AnnualSalary %>% gsub("$", "", fixed = FALSE))
head(Sal$AnnualSalary %>% gsub("$", "", fixed = TRUE))
tax <- read.csv("/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmpb5NzP7/dataa36411bb0f98", stringsAsFactors=FALSE)
View(tax)
read.csv("www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz",row.names=1, nr=3)
read.csv("www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz" ,row.names=1, nr=3)
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
nrow(tax)
head(tax$cityTax)
library(stringr)
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
tax$cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
tax$stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
sum(tax$cityTax)
tax$stateTax
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
tax$cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
tax$stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
sum(tax$cityTax)
tax$stateTax
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
tax$cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
tax$stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
sum(tax$cityTax)
sum(tax$stateTax)
head(tax$stateTax)
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
head(cityTax)
head(tax[ is.na(cityTax), ])
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
head(cityTax)
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
head(tax$stateTax[ is.na(stateTax) ])
table(tax$stateTax[ is.na(stateTax) ])
sum(tax$cityTax, na.rm = TRUE)
sum(tax$stateTax)
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
head(cityTax)
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
head(tax$stateTax[ is.na(stateTax) ])
table(tax$stateTax[ is.na(stateTax) ])
tax$cityTax = cityTax
tax$stateTax = stateTax
sum(tax$cityTax, na.rm = TRUE)
sum(tax$stateTax)
head(tax$propertyAddress)
tax$propertyAddress = str_trim(tax$propertyAddress)
head(tax$propertyAddress)
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
head(cityTax)
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
head(tax$stateTax[ is.na(stateTax) ])
table(tax$stateTax[ is.na(stateTax) ])
tax$cityTax = cityTax
tax$stateTax = stateTax
sum(tax$cityTax, na.rm = TRUE)
sum(tax$stateTax, na.rm = TRUE)
# 4. What is the 75th percentile of city and state tax paid by ward?
head(tax$propertyAddress)
tax$propertyAddress = str_trim(tax$propertyAddress)
head(tax$propertyAddress)
tax$street = str_detect(tax$propertyAddress,
"ST$")
head(tax)
sapply(tax_list, nrow)
sum(tax$street)
table(tax$street)
tapply(tax, tax$street, nrow)
#################
# Data Cleaning and Plotting
##############
# 6/17/2015
## Download the "Real Property Taxes" Data from my website (via OpenBaltimore):
# www.aejaffe.com/winterR_2016/data/real_property_tax.csv.gz
## note you don't need to unzip it to read it into R
rm( list = ls() ) # clear the workspace
library(stringr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv("~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
# 2. How many addresses pay property taxes?
nrow(tax)
# 3. What is the total city and state tax paid?
head(tax$cityTax)
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
head(cityTax)
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
head(tax$stateTax[ is.na(stateTax) ])
table(tax$stateTax[ is.na(stateTax) ])
tax$cityTax = cityTax
tax$stateTax = stateTax
sum(tax$cityTax, na.rm = TRUE)
sum(tax$stateTax, na.rm = TRUE)
# 4. What is the 75th percentile of city and state tax paid by ward?
head(tax$propertyAddress)
tax$propertyAddress = str_trim(tax$propertyAddress)
head(tax$propertyAddress)
tax$street = str_detect(tax$propertyAddress,
"ST$")
# 5. Split the data by ward into a list:
tax_list = split(tax, tax$street)
# Using `tapply()` and `table()`
#	a. how many observations are in each ward?
sapply(tax_list, nrow)
sum(tax$street)
table(tax$street)
tapply(tax, tax$street, nrow)
tapply(tax$propertyAddress, tax$street, length)
library(dplyr)
tax %>%
group_by(street) %>%
summarize(mean_state = mean(stateTax))
tax %>%
group_by(street) %>%
summarize(mean_state = mean(stateTax, na.rm = TRUE))
tapply(tax$stateTax, tax$street, mean, na.rm=TRUE)
head(tax)
ls()
rm( list = ls() ) # clear the workspace
library(stringr)
library(dplyr)
# 1. Read the Property Tax data into R and call it the variable `tax`
tax = read.csv(
"~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = FALSE)
tax_fac = read.csv(
"~/Downloads/real_property_tax.csv.gz",
stringsAsFactors = TRUE)
nrow(tax)
dim(tax)
head(tax$cityTax)
head(tax_fac$cityTax)
head(as.numeric(tax_fac$cityTax))
sum(as.numeric(tax_fac$cityTax))
head(as.numeric(tax$cityTax))
cityTax = tax$cityTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
stateTax = tax$stateTax %>%
str_replace(fixed("$"), "") %>%
as.numeric
ls()
head(cityTax)
sum(cityTax)
sum(cityTax, na.rm = TRUE)
head(tax$cityTax[ is.na(cityTax) ])
table(tax$cityTax[ is.na(cityTax) ])
head(tax$stateTax[ is.na(stateTax) ])
table(tax$stateTax[ is.na(stateTax) ])
tax$cityTax = cityTax
tax$stateTax = stateTax
sum(tax$cityTax, na.rm = TRUE)
sum(tax$stateTax, na.rm = TRUE)
head(tax$propertyAddress)
tax$propertyAddress = str_trim(tax$propertyAddress)
head(tax$propertyAddress)
head(tax)
tax$street = str_detect(tax$propertyAddress,
"ST$")
head(tax)
head(tax, 10)
tax %>% select(propertyAddress, street) %>% head(10)
tax$street = str_detect(
tax$propertyAddress,
"ST$")
tax$street = str_detect(
tax$propertyAddress,
"STREET$") | tax$street
ss = str_split(tax$street," ")
table(sapply(ss, last))
ss = str_split(tax$propertyAddress," ")
table(sapply(ss, last))
ss = str_split(tax$propertyAddress," ")
tab = table(sapply(ss, last))
sort(tab, decreasing = )
head(sort(tab, decreasing = TRUE))
head(sort(tab, decreasing = TRUE), 10)
tax_list = split(tax, tax$street)
length(tax_list)
head(tax_list[[1]])
head(tax_list[[2]])
sapply(tax_list, nrow)
sum(tax$street)
table(tax$street)
tapply(tax$propertyAddress, tax$street, length)
tax %>%
group_by(street) %>%
summarize(mean_state = mean(stateTax, na.rm = TRUE))
tapply(tax$stateTax, tax$street, mean, na.rm=TRUE)
head(tax)
table(tax$resCode)
names(table(tax$resCode))
unique(tax$resCode)
tax$resCode = str_trim(tax$resCode)
boxplot(cityTax ~ resCode, data = tax)
boxplot(log(cityTax) ~ resCode, data = tax)
tax %>% filter( resCode %in% "PRINCIPAL RESIDENCE")
pres = tax %>% filter( resCode %in% "PRINCIPAL RESIDENCE")
head(pres)
pres = tax %>% filter( resCode %in% "PRINCIPasdfAL RESIDENCE")
pres
pres = tax %>% filter( resCode %in% "PRINCIPAL RESIDENCE")
dim(pres)
hist(pres$cityTax)
hist(log(pres$cityTax +1))
cars
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(DT)
datatable(d)
source('~/Downloads/Data_Cleaning_Lab.R')
q('no')
