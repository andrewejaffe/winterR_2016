rj = right_join(base, visits)
dim(rj)
tail(rj)
## ----full_join-----------------------------------------------------------
fj = full_join(base, visits)
dim(fj)
tail(fj)
## ------------------------------------------------------------------------
args(tapply)
## ------------------------------------------------------------------------
tapply(wide$Average, wide$line, mean, na.rm = TRUE)
## ------------------------------------------------------------------------
gb = group_by(wide, line)
summarize(gb, mean_avg = mean(Average))
rest = tapply(wide$Average, wide$line, mean, na.rm = TRUE)
## ------------------------------------------------------------------------
gb = group_by(wide, line)
ress = summarize(gb, mean_avg = mean(Average))
class(rest0
class(rest)
rest
names(res)
names(rest)
class(ress)
ress %>% filter(line == "banner")
ress %>% filter(line %in% "banner")
ress %>% filter(line %in% c("banner", "green"))
gb
class(gb)
?ungroup()
groups(gb)
wide %>%
group_by(line) %>%
summarize(gb, mean_avg = mean(Average))
wide %>%
group_by(line) %>%
summarize(mean_avg = mean(Average))
wide %>%
group_by(line) %>%
summarize(mean_avg = mean(Average),
mean_alight = mean(Alightings))
head(wide)
head(gb)
gb$day
wide$day
head(gb)
nrow(gb)
nrow(wide)
ncol(wide)
ncol(gb)
ss = wide %>%
group_by(line) %>%
summarize(mean_avg = mean(Average),
mean_alight = mean(Alightings))
ss
as.data.frame(ss)
ss = as.data.frame(ss)
wide %>%
group_by(line) %>%
summarize(mean_boarding = mean(Boardings),
mean_alight = mean(Alightings))
wide %>%
group_by(line) %>%
summarize(mean_boarding = mean(Boardings, na.rm = TRUE),
mean_alight = mean(Alightings, na.rm = TRUE))
ss = wide %>%
group_by(line) %>%
summarize(mean_boarding = mean(Boardings, na.rm = TRUE),
mean_alight = mean(Alightings, na.rm = TRUE))
ss
class(ss)
sss = as.data.frame(ss)
sss
wide %>%
group_by(line) %>%
summarise(mean_avg = mean(Average))
## ------------------------------------------------------------------------
wide = wide %>% mutate(year = year(date),
month = month(date))
wide %>%
group_by(line, year) %>%
summarise(mean_avg = mean(Average))
wide = wide %>% mutate(year = year(date),
month = month(date))
wide %>%
group_by(line, year) %>%
summarise(mean_boardings = mean(Boarding))
wide = wide %>% mutate(year = year(date),
month = month(date))
wide %>%
group_by(line, year) %>%
summarise(mean_boardings = mean(Boardings))
wide %>%
group_by(line, year) %>%
summarise(mean_boardings = mean(Boardings, na.rm = TRUE))
expand.grid(line = c("banner", "green"),  year = 2010:2015)
wide %>%
group_by(line, year) %>%
summarise(mean_boardings = mean(Boardings, na.rm = TRUE))
wide %>%
group_by(line, year) %>%
summarise(
mean_boardings = mean(Boardings))
ss = wide %>%
group_by(line, year) %>%
summarise(
mean_boardings = mean(Boardings))
ss$mean_boardings[ is.na(ss$mean_boardings)] = c("Missing")
ss
ss$mean_boardings
ss = wide %>%
group_by(line, year) %>%
summarise(
mean_boardings = mean(Boardings, na.rm=TRUE),
num_na = sum(is.na(Boardings)))
head(ss)
head(ss, 10)
all_years = expand.grid(
line = c("banner", "green"),
year = 2010:2015)
all_years
merge(ss, all_years, all.y = TRUE)
## ----cor1, comment="",prompt=TRUE----------------------------------------
destfile = tempfile(fileext = ".rda")
download.file("http://www.aejaffe.com/winterR_2016/data/charmcirc.rda", destfile = destfile)
load(destfile)
cor(circ2$orangeAverage, circ2$purpleAverage)
cor(circ2$orangeAverage, circ2$purpleAverage, use="complete.obs")
## ----cor2, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,grep("Average",names(circ2))], use="complete.obs"),3)
## ----cor3, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,3:4],circ2[,5:6], use="complete.obs"),3)
## ----cor4, comment="",prompt=TRUE----------------------------------------
ct= cor.test(circ2$orangeAverage,
circ2$purpleAverage, use="complete.obs")
ct
names(ct)
ct$statistic
ct$p.value
round(ct$p.value, 20)
ct
ct$conf.int
ct$statistic
library(broom)
ifelse(ct$p.value < 0.01, "< 0.01", signif(ct$p.value, 3))
mypval = 0.02
ifelse(mypval < 0.01, "< 0.01", signif(ct$p.value, 3))
ifelse(mypval < 0.01, "< 0.01", signif(ct$p.value, 4))
ifelse(mypval < 0.01, "< 0.01", signif(mypval, 4))
?round
round(100.4566, digits = 2)
round(100, digits = 2)
round(99, digits = 2)
place = 100
ceiling(99/place) * place
99/place
ceiling(99/place)
ceiling(95/place)
ceiling(95/place) * place
ceiling(92/place) * place
round(92/place) * place
round(920/place) * place
x = c(1.9, 1.82)
x = c(1.9, 1.82, 1.56)
round(x, 2)
round(x, 1)
signif(x, 1)
signif(x, 2)
signif(x, 3)
signif(x, 4)
signif(x, 5)
?t.test
## ----cor1, comment="",prompt=TRUE----------------------------------------
destfile = tempfile(fileext = ".rda")
download.file("http://www.aejaffe.com/winterR_2016/data/charmcirc.rda", destfile = destfile)
load(destfile)
cor(circ2$orangeAverage, circ2$purpleAverage)
cor(circ2$orangeAverage, circ2$purpleAverage, use="complete.obs")
## ----cor2, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,grep("Average",names(circ2))], use="complete.obs"),3)
## ----cor3, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,3:4],circ2[,5:6], use="complete.obs"),3)
## ----cor4, comment="",prompt=TRUE----------------------------------------
ct= cor.test(circ2$orangeAverage,
circ2$purpleAverage, use="complete.obs")
ct
## ----cor4a, comment="",prompt=TRUE, fig.height=4,fig.width=4-------------
plot(circ2$orangeAverage, circ2$purpleAverage,
xlab="Orange Line", ylab="Purple Line",
main="Average Ridership",cex.axis=1.5,
cex.lab=1.5,cex.main=2)
legend("topleft", paste("r =", signif(ct$estimate,3)), bty="n",cex=1.5)
## ----cor5, comment="",prompt=TRUE----------------------------------------
# str(ct)
names(ct)
ct$statistic
ct$p.value
## ----tt1, comment="",prompt=TRUE-----------------------------------------
tt = t.test(circ2$orangeAverage, circ2$purpleAverage)
tt
## ----tt1_1, comment="", prompt=TRUE--------------------------------------
names(tt)
t.test(circ2$orangeAverage, circ2$purpleAverage, paired = TRUE)
?wilcox.test
## ----cor1, comment="",prompt=TRUE----------------------------------------
destfile = tempfile(fileext = ".rda")
download.file("http://www.aejaffe.com/winterR_2016/data/charmcirc.rda", destfile = destfile)
load(destfile)
cor(circ2$orangeAverage, circ2$purpleAverage)
cor(circ2$orangeAverage, circ2$purpleAverage, use="complete.obs")
## ----cor2, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,grep("Average",names(circ2))], use="complete.obs"),3)
## ----cor3, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,3:4],circ2[,5:6], use="complete.obs"),3)
## ----cor4, comment="",prompt=TRUE----------------------------------------
ct= cor.test(circ2$orangeAverage,
circ2$purpleAverage, use="complete.obs")
ct
## ----cor4a, comment="",prompt=TRUE, fig.height=4,fig.width=4-------------
plot(circ2$orangeAverage, circ2$purpleAverage,
xlab="Orange Line", ylab="Purple Line",
main="Average Ridership",cex.axis=1.5,
cex.lab=1.5,cex.main=2)
legend("topleft", paste("r =", signif(ct$estimate,3)), bty="n",cex=1.5)
## ----cor5, comment="",prompt=TRUE----------------------------------------
# str(ct)
names(ct)
ct$statistic
ct$p.value
## ----tt1, comment="",prompt=TRUE-----------------------------------------
tt = t.test(circ2$orangeAverage, circ2$purpleAverage)
tt
## ----tt1_1, comment="", prompt=TRUE--------------------------------------
names(tt)
## ----tt2, comment="",prompt=TRUE-----------------------------------------
http_data_dir = "http://www.aejaffe.com/winterR_2016/data/"
cars = read.csv(paste0(http_data_dir, "kaggleCarAuction.csv"),
as.is=TRUE)
tt2 = t.test(VehBCost~IsBadBuy, data=cars)
tt2$estimate
## ----tt3, comment="",prompt=TRUE, fig.height=4,fig.width=4---------------
boxplot(VehBCost~IsBadBuy, data=cars,
xlab="Bad Buy",ylab="Value")
leg = paste("t=", signif(tt$statistic,3),
" (p=",signif(tt$p.value,3),")",sep="")
legend("topleft", leg, cex=1.2, bty="n")
## ----regress1, comment="",prompt=TRUE------------------------------------
fit = lm(VehBCost~IsBadBuy, data=cars)
fit
tt2
tt2$estimate
diff(tt2$estimate)
tt2$estimate[1]
tt2$estimate[1] - tt2$estimate[2]
tt2$estimate[2] - tt2$estimate[1]
fit$coefficients
sfit = summary(fit)
print(sfit)
class(fit)
class(sfit)
sfit$coefficients
signif(sfit$coefficients, 3)
signif(sfit$coefficients, 4)
## ----cor1, comment="",prompt=TRUE----------------------------------------
destfile = tempfile(fileext = ".rda")
download.file("http://www.aejaffe.com/winterR_2016/data/charmcirc.rda", destfile = destfile)
load(destfile)
cor(circ2$orangeAverage, circ2$purpleAverage)
cor(circ2$orangeAverage, circ2$purpleAverage, use="complete.obs")
## ----cor2, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,grep("Average",names(circ2))], use="complete.obs"),3)
## ----cor3, comment="",prompt=TRUE----------------------------------------
signif(cor(circ2[,3:4],circ2[,5:6], use="complete.obs"),3)
## ----cor4, comment="",prompt=TRUE----------------------------------------
ct= cor.test(circ2$orangeAverage,
circ2$purpleAverage, use="complete.obs")
ct
## ----cor4a, comment="",prompt=TRUE, fig.height=4,fig.width=4-------------
plot(circ2$orangeAverage, circ2$purpleAverage,
xlab="Orange Line", ylab="Purple Line",
main="Average Ridership",cex.axis=1.5,
cex.lab=1.5,cex.main=2)
legend("topleft", paste("r =", signif(ct$estimate,3)), bty="n",cex=1.5)
## ----cor5, comment="",prompt=TRUE----------------------------------------
# str(ct)
names(ct)
ct$statistic
ct$p.value
## ----tt1, comment="",prompt=TRUE-----------------------------------------
tt = t.test(circ2$orangeAverage, circ2$purpleAverage)
tt
## ----tt1_1, comment="", prompt=TRUE--------------------------------------
names(tt)
## ----tt2, comment="",prompt=TRUE-----------------------------------------
http_data_dir = "http://www.aejaffe.com/winterR_2016/data/"
cars = read.csv(paste0(http_data_dir, "kaggleCarAuction.csv"),
as.is=TRUE)
tt2 = t.test(VehBCost~IsBadBuy, data=cars)
tt2$estimate
## ----tt3, comment="",prompt=TRUE, fig.height=4,fig.width=4---------------
boxplot(VehBCost~IsBadBuy, data=cars,
xlab="Bad Buy",ylab="Value")
leg = paste("t=", signif(tt$statistic,3),
" (p=",signif(tt$p.value,3),")",sep="")
legend("topleft", leg, cex=1.2, bty="n")
## ----regress1, comment="",prompt=TRUE------------------------------------
fit = lm(VehBCost~IsBadBuy, data=cars)
fit
## ----regress2, comment="",prompt=TRUE------------------------------------
sfit = summary(fit)
print(sfit)
## ----regress3, comment="",prompt=TRUE------------------------------------
names(sfit)
sfit$coef
## ------------------------------------------------------------------------
fit = lm(VehOdo~VehicleAge, data=cars)
print(fit)
## ----regress4, comment="",prompt=TRUE, fig.height=4,fig.width=8----------
library(scales) # we need this for the alpha command - make points transparent
par(mfrow=c(1,2))
plot(VehOdo ~ jitter(VehicleAge,amount=0.2), data=cars, pch = 19,
col = alpha("black",0.05), xlab="Vehicle Age (Yrs)")
abline(fit, col="red",lwd=2)
legend("topleft", paste("p =",summary(fit)$coef[2,4]))
boxplot(VehOdo ~ VehicleAge, data=cars, varwidth=TRUE)
abline(fit, col="red",lwd=2)
## ----regress5, comment="",prompt=TRUE, fig.height=4,fig.width=8----------
fit2 = lm(VehOdo ~ IsBadBuy + VehicleAge, data=cars)
summary(fit2)
## ----avplot, comment="",prompt=TRUE, fig.height=4,fig.width=8------------
library(car)
avPlots(fit2)
plot(fit2)
fit3 = lm(VehOdo ~ factor(TopThreeAmericanName), data=cars)
summary(fit3)
## ----regress7, comment="",prompt=TRUE, fig.height=4,fig.width=8----------
glmfit = glm(IsBadBuy ~ VehOdo + VehicleAge, data=cars, family=binomial())
summary(glmfit)
?confint()
confint(fit)
confint(glmfit)
?binomial
?binom.test
qnorm(0.025)
qnorm(0.975)
?qnorm(0.975)
qnorm(0.025, lower.tail = FALSE)
?AIC
AIC(glm.fit())
AIC(glmfit)
## ----plot_lm, comment="",prompt=TRUE, fig.height=4,fig.width=8-----------
par(mfrow=c(2,2))
plot(fit2, ask= FALSE)
## ----regress6, comment="",prompt=TRUE, fig.height=4,fig.width=8----------
fit3 = lm(VehOdo ~ factor(TopThreeAmericanName), data=cars)
summary(fit3)
## ----regress7, comment="",prompt=TRUE, fig.height=4,fig.width=8----------
glmfit = glm(IsBadBuy ~ VehOdo + VehicleAge, data=cars, family=binomial())
summary(glmfit)
rm(list = ls())
library(rmarkdown)
library(knitr)
files <- dir(pattern = '[.]Rmd$', recursive = TRUE)
files = files[ files != "index.Rmd" ]
files
file =files[13]
renderFile <- function(file) {
owd = getwd()
setwd(dirname(file))
file = basename(file)
output = gsub(".Rmd", ".R", file)
## Extract R code
purl(file, output = output)
## Make presentation
render(file, output_format = 'all')
on.exit({
setwd(owd)
})
}
renderFile(file)
file
purl(file)
rm(list = ls())
library(rmarkdown)
library(knitr)
files <- dir(pattern = '[.]Rmd$', recursive = TRUE)
files = files[ files != "index.Rmd" ]
renderFile <- function(file) {
owd = getwd()
setwd(dirname(file))
file = basename(file)
output = gsub(".Rmd", ".R", file)
## Extract R code
purl(file, output = output)
## Make presentation
render(file, output_format = 'all')
on.exit({
setwd(owd)
})
}
files[13]
file = files[13]
renderFile(file)
library(DT)
source('~/.active-rstudio-document', echo=TRUE)
setwd("./Knitr/lecture/")
source('~/.active-rstudio-document', echo=TRUE)
mod.yr
coef(mod.yr)
coef(summary(mod.yr))
x = coef(summary(mod.yr))
rownames(x) = str_replace("factor(dateInstalled)", "", rownames(x))
rownames(x) = str_replace(rownames(x), "factor(dateInstalled)", "")
x
rownames(x) = str_replace(rownames(x), fixed("factor(dateInstalled)"), "")
x
x = signif(x, 2)
x
car
cars
bl = read.csv("../../data/Bike_Lanes.csv")
bl = read.csv("../../data/Bike_Lanes.csv", as.is =TRUE)
bl
head(bl)
mod = lm(length ~ factor(numLanes), data = bl)
mod
smod = summary(mod)
smod
ci = confint(mod)
ci
smod
smod$coefficients
cbind(smod$coefficients$Estimate, ci)
cbind(smod$coefficients[, "Estimate"], ci)
mat = cbind(smod$coefficients[, "Estimate"], ci)
mat = data.frame(mat)
colnames(mat) = c("Beta", "Lower", "Upper")
mat
mat$CI = paste0("(", round(mat$Lower, 2),
", ", round(mat$Upper, 2), ")")
head9mat
head(mat)
mat = mat[, c("Beta", "CI")]
mat
mat$Variable = rownames(mat)
head(mat)
mat$Variable = str_replace(mat$Variable, fixed("factor(numLanes)"), "Number of Lanes:")
mat
bl = read.csv("../../data/Bike_Lanes.csv", as.is =TRUE)
mod = lm(length ~ factor(numLanes), data = bl)
smod = summary(mod)
ci = confint(mod)
mat = cbind(smod$coefficients[, "Estimate"], ci)
mat = data.frame(mat)
colnames(mat) = c("Beta", "Lower", "Upper")
mat$CI = paste0("(", round(mat$Lower, 2),
", ", round(mat$Upper, 2), ")")
mat = mat[, c("Beta", "CI")]
mat$Variable = rownames(mat)
mat$Variable = str_replace(mat$Variable, fixed("factor(numLanes)"), "Number of Lanes: ")
mat
mat = mat[, c("Variable", "Beta", "CI")]
head(mat)
bl = read.csv("../../data/Bike_Lanes.csv", as.is =TRUE)
mod = lm(length ~ factor(numLanes), data = bl)
smod = summary(mod)
ci = confint(mod)
mat = cbind(smod$coefficients[, "Estimate"], ci)
mat = data.frame(mat)
colnames(mat) = c("Beta", "Lower", "Upper")
mat$CI = paste0("(", round(mat$Lower, 2),
", ", round(mat$Upper, 2), ")")
mat = mat[, c("Beta", "CI")]
mat$Variable = rownames(mat)
rownames(mat) = NULL
mat$Variable = str_replace(mat$Variable, fixed("factor(numLanes)"), "Number of Lanes: ")
mat = mat[, c("Variable", "Beta", "CI")]
mat
mat$Variable = plyr::revalue(mat$Variable, c("(Intercept)" = "B0"))
head(mat)
library(pander)
pandoc(mat)
library(pander)
pandoc(mat)
pandoc.table(mat)
```{r read}
bl = read.csv("~/Dropbox/WinterR_2014/data/Bike_Lanes.csv", as.is =TRUE)
bl = read.csv("~/Dropbox/WinterR_2016/data/Bike_Lanes.csv", as.is =TRUE)
bl = read.csv("~/Dropbox/Classes/WinterR_2016/data/Bike_Lanes.csv", as.is =TRUE)
rm(list=ls())
bl2 = bl
bl2$numLanes = factor(bl2$numLanes)
mod2 = lm(length ~ numLanes, data = bl2)
bl = read.csv("~/Dropbox/Classes/WinterR_2016/data/Bike_Lanes.csv", as.is =TRUE)
bl2 = bl
bl2$numLanes = factor(bl2$numLanes)
mod2 = lm(length ~ numLanes, data = bl2)
bl2
mod2
mod = lm(length ~ factor(numLanes), data = bl)
mod
mmod
mod2
pander(mat)
pander(mod)
source('~/.active-rstudio-document', echo=TRUE)
smod$coefficients
class(smod$coefficients)
smod$coefficients[, "Pr(>|t|)"]
pvals =smod$coefficients[, "Pr(>|t|)"]
pvals = ifelse(pvals < 0.001, "< 0.001", round(pvals, 2))
pvals
